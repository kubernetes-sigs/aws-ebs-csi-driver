#!/bin/bash
# Copyright 2025 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### This script helps setup, run, and cleanup an ebs-scale-test. See README.md
set -euo pipefail
BASE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

## Overridable environment variables. See README.md
export CLUSTER_TYPE
export TEST_TYPE
export REPLICAS
export DRIVER_VALUES_FILEPATH

export CLUSTER_NAME
export EXPORT_DIR
export S3_BUCKET
export SCALABILITY_TEST_RUN_NAME

CLUSTER_TYPE=${CLUSTER_TYPE:="pre-allocated"}
TEST_TYPE=${TEST_TYPE:="scale-sts"}
REPLICAS=${REPLICAS:=1000}
EBS_INSTALL_SNAPSHOT_VERSION=${EBS_INSTALL_SNAPSHOT_VERSION:-"v8.2.1"}
DRIVER_VALUES_FILEPATH=${DRIVER_VALUES_FILEPATH:="$BASE_DIR/helpers/cluster-setup/scale-driver-values.yaml"}

CLUSTER_NAME=${CLUSTER_NAME:="ebs-scale-$CLUSTER_TYPE"}
SCALABILITY_TEST_RUN_NAME=${SCALABILITY_TEST_RUN_NAME:="$CLUSTER_NAME-$TEST_TYPE-$REPLICAS-$(date -u +%Y-%m-%dT%H:%M%Z)"}
EXPORT_DIR=${EXPORT_DIR:="/tmp/ebs-scale-test/$SCALABILITY_TEST_RUN_NAME"}

## Internal environment variables
export PRE_ALLOCATED_NODES K8S_VERSION KARPENTER_VERSION AWS_ACCOUNT_ID AWS_REGION BASE_DIR TEMPOUT

PRE_ALLOCATED_NODES=${PRE_ALLOCATED_NODES:=$((($REPLICAS / 100) + 1))}
K8S_VERSION=$(aws eks describe-cluster-versions --query "clusterVersions[0].clusterVersion")
KARPENTER_VERSION="1.5.1"

AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
AWS_REGION=$(aws configure get region)
TEMPOUT=$(mktemp)

S3_BUCKET=${S3_BUCKET:="ebs-scale-tests-$AWS_ACCOUNT_ID"}

## Sourcing helper scripts
source "${BASE_DIR}/helpers/cluster-setup/manage-cluster.sh"

source "${BASE_DIR}/helpers/scale-test/collect-and-export-metrics.sh"
source "${BASE_DIR}/helpers/scale-test/pre_test_validation.sh"

source "${BASE_DIR}/helpers/scale-test/scale-sts-test/scale-sts.sh"
source "${BASE_DIR}/helpers/scale-test/expand-and-modify-test/expand-and-modify.sh"
source "${BASE_DIR}/helpers/scale-test/snapshot-volume-scale-test/snapshot-volume-scale.sh"

usage() {
  echo "Usage: $0 [base-cmd]"
  echo "Possible base-cmds: 'setup', 'run', 'cleanup'"
  exit 1
}

check_dependencies_helper() {
  local readonly dependencies=("kubectl" "aws" "eksctl" "gomplate" "jq")

  for cmd in "${dependencies[@]}"; do
    if ! command -v "${cmd}" &>/dev/null; then
      echo "${cmd} could not be found, please install it."
      exit 1
    fi
  done
}

## Script start

# Functions sourced from helpers/cluster-setup/manage-cluster.sh
setup_scale() {
  create_cluster

  if [[ $CLUSTER_TYPE == "karpenter" ]]; then
    deploy_karpenter
  fi

  deploy_snapshot_controller
  deploy_ebs_csi_driver
}

# Functions sourced from helpers/scale-test/...
run_scale() {
  pre_test_validation

  case "$TEST_TYPE" in
  *scale-sts*) sts_scale_test ;;
  *expand-and-modify*) expand_and_modify_test ;;
  *snapshot-volume-scale*) snapshot_scale_test ;;
  *)
    echo "Invalid TEST_TYPE '$TEST_TYPE'."
    exit 1
    ;;
  esac

  collect-and-export-metrics
}

# Functions sourced from helpers/cluster-setup/manage-cluster.sh
clean_scale() {
  if [[ $CLUSTER_TYPE == "karpenter" ]]; then
    cleanup_karpenter
  fi

  cleanup_cluster
  check_lingering_volumes
  check_lingering_snapshots
}

main() {
  # Check params
  [[ $# -ne 1 ]] && usage
  check_dependencies_helper

  # Make tmp directory if it doesn't exist
  mkdir -p "$EXPORT_DIR"

  case "$1" in
  *setup* | *create*) setup_scale ;;
  *run*) run_scale ;;
  *clean* | *delete*) clean_scale ;;
  *) usage ;;
  esac
}

main "$@"
