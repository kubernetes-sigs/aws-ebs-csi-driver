// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cloud/sagemaker_interface.go

// Package cloud is a generated GoMock package.
package cloud

import (
	context "context"
	reflect "reflect"

	sagemaker "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	gomock "github.com/golang/mock/gomock"
)

// MockSageMakerAPI is a mock of SageMakerAPI interface.
type MockSageMakerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSageMakerAPIMockRecorder
}

// MockSageMakerAPIMockRecorder is the mock recorder for MockSageMakerAPI.
type MockSageMakerAPIMockRecorder struct {
	mock *MockSageMakerAPI
}

// NewMockSageMakerAPI creates a new mock instance.
func NewMockSageMakerAPI(ctrl *gomock.Controller) *MockSageMakerAPI {
	mock := &MockSageMakerAPI{ctrl: ctrl}
	mock.recorder = &MockSageMakerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSageMakerAPI) EXPECT() *MockSageMakerAPIMockRecorder {
	return m.recorder
}

// AttachClusterNodeVolume mocks base method.
func (m *MockSageMakerAPI) AttachClusterNodeVolume(ctx context.Context, params *sagemaker.AttachClusterNodeVolumeInput, optFns ...func(*sagemaker.Options)) (*sagemaker.AttachClusterNodeVolumeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachClusterNodeVolume", varargs...)
	ret0, _ := ret[0].(*sagemaker.AttachClusterNodeVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachClusterNodeVolume indicates an expected call of AttachClusterNodeVolume.
func (mr *MockSageMakerAPIMockRecorder) AttachClusterNodeVolume(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachClusterNodeVolume", reflect.TypeOf((*MockSageMakerAPI)(nil).AttachClusterNodeVolume), varargs...)
}

// DetachClusterNodeVolume mocks base method.
func (m *MockSageMakerAPI) DetachClusterNodeVolume(ctx context.Context, params *sagemaker.DetachClusterNodeVolumeInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DetachClusterNodeVolumeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachClusterNodeVolume", varargs...)
	ret0, _ := ret[0].(*sagemaker.DetachClusterNodeVolumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachClusterNodeVolume indicates an expected call of DetachClusterNodeVolume.
func (mr *MockSageMakerAPIMockRecorder) DetachClusterNodeVolume(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachClusterNodeVolume", reflect.TypeOf((*MockSageMakerAPI)(nil).DetachClusterNodeVolume), varargs...)
}
